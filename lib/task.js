// Generated by CoffeeScript 1.4.0
var Task, defer, uuid;

defer = require('when').defer;

uuid = require('node-uuid');

module.exports = Task = (function() {

  function Task(opts) {
    var _this = this;
    if (opts == null) {
      opts = {};
    }
    this.uuid = opts.uuid || uuid.v1();
    this.deferral = void 0;
    this.notice = opts.notice;
    Object.defineProperty(this, 'uuid', {
      writable: false,
      enumerable: true,
      value: this.uuid
    });
    Object.defineProperty(this, 'deferral', {
      enumerable: false
    });
    Object.defineProperty(this, 'notice', {
      enumerable: false
    });
    Object.defineProperty(this, 'running', {
      enumerable: true,
      get: function() {
        return _this.deferral != null;
      }
    });
    if (this.notice != null) {
      this.notice.use(function(msg, next) {
        if (msg.context.direction !== 'in') {
          return next();
        }
        if (msg.context.type !== 'event') {
          return next();
        }
        console.log({
          INBOUND_EVENT: msg.content
        });
        return next();
      });
    }
  }

  Task.prototype.start = function(opts) {
    if (opts == null) {
      opts = {};
    }
    if (this.running) {
      console.log({
        STILL_RUNNING_PREVIOUS: opts
      });
      return this.deferral.promise;
    }
    this.deferral = defer();
    if (this.notice != null) {
      this.notice.event('task::start', opts);
    }
    return this.deferral.promise;
  };

  return Task;

})();
