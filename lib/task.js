// Generated by CoffeeScript 1.4.0
var Task, defer, uuid;

defer = require('when').defer;

uuid = require('node-uuid');

module.exports = Task = (function() {

  function Task(opts) {
    var _this = this;
    if (opts == null) {
      opts = {};
    }
    this.uuid = opts.uuid || uuid.v1();
    this.deferral = void 0;
    this.notice = opts.notice;
    Object.defineProperty(this, 'uuid', {
      writable: false,
      enumerable: true,
      value: this.uuid
    });
    Object.defineProperty(this, 'deferral', {
      enumerable: false
    });
    Object.defineProperty(this, 'notice', {
      enumerable: false
    });
    Object.defineProperty(this, 'running', {
      enumerable: true,
      get: function() {
        return _this.deferral != null;
      }
    });
  }

  Task.prototype.reload = function(opts) {
    if (opts == null) {
      opts = {};
    }
    this.notice = opts.notice;
    return this;
  };

  Task.prototype.start = function(opts) {
    if (opts == null) {
      opts = {};
    }
    if (this.running) {
      console.log({
        STILL_RUNNING_TASK: opts
      });
      return this.deferral.promise;
    }
    this.deferral = defer();
    if (this.notice != null) {
      this.notice.event('task::start', opts);
    }
    return this.deferral.promise;
  };

  Task.prototype.terminate = function() {
    if (this.deferral != null) {
      this.deferral.reject('task terminated');
    }
    return this.deferral = void 0;
  };

  Task.prototype.message = function(msg, next) {
    var state;
    if (msg.context.direction !== 'in') {
      return next();
    }
    if (!(function() {
      try {
        return state = msg.context.title.match(/task::(.*)/)[1];
      } catch (_error) {}
    })()) {
      return next();
    }
    switch (state) {
      case 'resolve':
        this.deferral.resolve(msg);
        this.deferral = void 0;
        return next();
      case 'reject':
        this.deferral.reject(msg);
        this.deferral = void 0;
        return next();
      case 'notify':
        this.deferral.notify(msg);
        return next();
      default:
        return next();
    }
  };

  return Task;

})();
