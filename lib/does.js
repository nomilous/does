// Generated by CoffeeScript 1.6.3
var deferred, detect, lastInstance, should;

deferred = require('also').deferred;

should = require('should');

lastInstance = void 0;

module.exports = function(config) {
  var api, local, mode, seq;
  if (config == null) {
    config = {};
  }
  mode = ((function() {
    try {
      return config.does.mode;
    } catch (_error) {}
  })()) || 'spec';
  seq = 0;
  if (mode === 'spec') {
    lastInstance = local = {
      expectations: {},
      /*
      
      
      `local.expectations` - Houses currently active expectations 
      -----------------------------------------------------------
      
      Storage Structure
      
      ```
      
      expectations/:uuid:/createdAt   # * Timestamp
      expectations/:uuid:/timeout     # * ((hopefully)) Timeout of the parent mocha test.
      expectations/:uuid:/object      # * Reference to object
      expectations/:uuid:/type        # * Constructor name (if present) ##undecided
      expectations/:uuid:/functions   # * List of function expectations
      expectations/:uuid:/spectator   # * Spectator function name (does or $does)
      
      expectations/:uuid:/functions/fnName/original       # * Container for the original function
      expectations/:uuid:/functions/fnName/original/fn    # * Reference to the original function
      
      expectations/:uuid:/functions/fnName/expects    # * Array of mock function containers
      ```
      
      * Currently only the first mock in the array is used
      * Later it should switch to the second upon calling the first to allow more than 
        one mock to be set up in a sequece
      
      ```
      expectations/:uuid:/functions/fnName/expects/0/called     # * Boolean - was it called
      expectations/:uuid:/functions/fnName/expects/0/count      # * (temporary) - count of calls
      expectations/:uuid:/functions/fnName/expects/0/break      # * (later) - sets a breakpoint - COMPLEXITIES: test timeouts, runs respawn new process
      expectations/:uuid:/functions/fnName/expects/0/stub       # * The stub function (wrapper)
      expectations/:uuid:/functions/fnName/expects/0/spy        # * Boolean - should it call onward to origal function 
      expectations/:uuid:/functions/fnName/expects/0/fn         # * The function mocker
      
      ```
      
      * The stub function (wrapper) substitutes the real function on the ""live"" object 
      * It calls the mocker as assigned by `object.does fnName: -> 'this fn is the mocker'`
      * It then calls the original if spy is true
      
      expectations/:uuid:/properties  # later
      */

      spectate: deferred(function(action, opts, object) {
        var name, spectatorName;
        if (object == null) {
          return action.reject(new Error("does can't expect undefined to do stuff"));
        }
        name = opts.name;
        spectatorName = (object.does != null) && (object.does.uuid == null) ? '$does' : 'does';
        if ((object[spectatorName] != null) && object[spectatorName].active) {
          local.flush();
        }
        return (function(uuid) {
          local.expectations[uuid] = {
            createdAt: new Date,
            object: object,
            type: (function() {
              try {
                return object.constructor.name;
              } catch (_error) {}
            })(),
            name: name,
            tagged: opts.tagged || false,
            functionsCount: 0,
            functions: {},
            spectator: spectatorName
          };
          object[spectatorName] = function(expectations) {
            var fn, fnName, spy, _results;
            _results = [];
            for (fnName in expectations) {
              if (fnName.match(/^_/)) {
                fnName = fnName.slice(1);
                spy = true;
                fn = expectations["_" + fnName];
              } else {
                spy = false;
                fn = expectations[fnName];
              }
              _results.push(local.expectFn({
                uuid: uuid,
                fnName: fnName,
                spy: spy,
                fn: fn
              }));
            }
            return _results;
          };
          Object.defineProperty(object[spectatorName], 'uuid', {
            get: function() {
              return uuid;
            }
          });
          return action.resolve(object);
        })(++seq);
      }),
      expectFn: function(_arg) {
        var expect, expectation, expects, fn, fnName, functions, object, original, spectator, spy, stub, type, uuid, _ref;
        uuid = _arg.uuid, fnName = _arg.fnName, fn = _arg.fn, spy = _arg.spy;
        expectation = local.expectations[uuid];
        object = expectation.object, type = expectation.type, spectator = expectation.spectator, functions = expectation.functions;
        _ref = functions[fnName] || (functions[fnName] = {
          expects: [],
          original: {
            fn: object[fnName]
          }
        }), expects = _ref.expects, original = _ref.original;
        expectation.functionsCount++;
        object[spectator].active = true;
        if (expects[0] != null) {
          console.log("does doesn't support multiple expectations - already expecting " + type + "." + fnName + "()");
          return;
        }
        if (spy) {
          object[fnName] = stub = function() {
            /* STUB (spy)*/

            expect.called = true;
            expect.count++;
            expect.fn.apply(this, arguments);
            return original.fn.apply(this, arguments);
          };
        } else {
          object[fnName] = stub = function() {
            /* STUB (mocker)*/

            expect.called = true;
            expect.count++;
            return expect.fn.apply(this, arguments);
          };
        }
        return expects[0] = expect = {
          called: false,
          count: 0,
          stub: stub,
          spy: spy,
          fn: fn
        };
      },
      flush: deferred(function(action) {
        var expectation, expects, fnName, functions, object, original, tagged, uuid;
        for (uuid in local.expectations) {
          expectation = local.expectations[uuid];
          object = expectation.object, functions = expectation.functions, tagged = expectation.tagged;
          for (fnName in functions) {
            if (tagged) {
              expects = functions[fnName].expects;
              expects[0].called = false;
              expects[0].count = 0;
              continue;
            }
            original = functions[fnName].original;
            object[fnName] = original.fn;
            delete functions[fnName];
          }
          delete local.expectations[uuid];
        }
        return action.resolve();
      }),
      assert: deferred(function(action, done) {
        var call, error, expect, expected, expects, fnName, functions, functionsCount, name, object, original, resulted, spectator, type, uuid, _ref, _ref1;
        if (done == null) {
          done = null;
        }
        if (typeof done === 'function') {
          expected = {};
          resulted = {};
          for (uuid in local.expectations) {
            _ref = local.expectations[uuid], object = _ref.object, type = _ref.type, name = _ref.name, spectator = _ref.spectator, functionsCount = _ref.functionsCount, functions = _ref.functions;
            if (!(functionsCount > 0)) {
              continue;
            }
            expected[name] = {
              functions: {}
            };
            resulted[name] = {
              functions: {}
            };
            for (fnName in functions) {
              _ref1 = functions[fnName], expects = _ref1.expects, original = _ref1.original;
              expect = expects[0];
              call = "" + type + "." + fnName + "()";
              expected[name].functions[call] = {
                'was called': true
              };
              resulted[name].functions[call] = {
                'was called': expect.called
              };
            }
            object[spectator].active = false;
          }
          try {
            resulted.should.eql(expected);
          } catch (_error) {
            error = _error;
            done(error);
            action.reject(error);
          }
        }
        return local.flush().then(function() {
          return action.resolve();
        });
      })
    };
  } else {
    throw new Error("does doesn't " + mode);
  }
  return api = {
    spectate: local.spectate,
    assert: local.assert
  };
};

detect = function(context) {
  if ((context.xit != null) && (context.xdescribe != null) && (context.xcontext != null)) {
    return 'mocha';
  }
};

Object.defineProperty(module.exports, '_test', {
  get: function() {
    return function() {
      return lastInstance;
    };
  }
});
