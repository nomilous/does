// Generated by CoffeeScript 1.6.3
var deferred, lastInstance;

deferred = require('also').deferred;

lastInstance = void 0;

module.exports = function(config) {
  var api, local, mode, seq;
  if (config == null) {
    config = {};
  }
  mode = config.mode || 'spec';
  seq = 0;
  if (mode === 'spec') {
    lastInstance = local = {
      expectations: {},
      spectate: deferred(function(action, object) {
        var id, record;
        if (object == null) {
          return action.reject(new Error("does can't expect undefined to do stuff"));
        }
        id = ++seq;
        local.expectations[id] = record = {
          object: object,
          originals: {}
        };
        object.does = function(expectations) {
          var fn, _results;
          _results = [];
          for (fn in expectations) {
            record.originals[fn] = object[fn];
            _results.push(object[fn] = expectations[fn]);
          }
          return _results;
        };
        return action.resolve(object);
      }),
      expect: function() {},
      verify: function() {}
    };
  } else {
    throw new Error("does doesn't " + mode);
  }
  return api = {
    spectate: local.spectate
  };
};

Object.defineProperty(module.exports, '_test', {
  get: function() {
    return function() {
      return lastInstance;
    };
  }
});
