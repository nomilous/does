// Generated by CoffeeScript 1.6.3
var deferred, lastInstance;

deferred = require('also').deferred;

lastInstance = void 0;

module.exports = function(config) {
  var api, local, mode, seq;
  if (config == null) {
    config = {};
  }
  mode = config.mode || 'spec';
  seq = 0;
  if (mode === 'spec') {
    lastInstance = local = {
      expectations: {},
      spectate: deferred(function(action, object) {
        if (object == null) {
          return action.reject(new Error("does can't expect undefined to do stuff"));
        }
        return (function(id) {
          local.expectations[id] = {
            object: object,
            originals: {}
          };
          object.does = function(expectations) {
            var fn, spy, title, _results;
            _results = [];
            for (title in expectations) {
              if (title.match(/^_/)) {
                title = title.slice(1);
                spy = true;
                fn = expectations["_" + title];
              } else {
                spy = false;
                fn = expectations[title];
              }
              _results.push(local.expect({
                uuid: id,
                title: title,
                spy: spy,
                fn: fn
              }));
            }
            return _results;
          };
          Object.defineProperty(object.does, 'uuid', {
            get: function() {
              return id;
            }
          });
          return action.resolve(object);
        })(++seq);
      }),
      expect: function(_arg) {
        var fn, record, spy, title, uuid;
        uuid = _arg.uuid, title = _arg.title, fn = _arg.fn, spy = _arg.spy;
        record = local.expectations[uuid];
        record.originals[title] = record.object[title];
        if (!spy) {
          return record.object[title] = fn;
        }
        return record.object[title] = function() {
          fn.apply(this, arguments);
          return record.originals[title].apply(this, arguments);
        };
      },
      verify: function() {}
    };
  } else {
    throw new Error("does doesn't " + mode);
  }
  return api = {
    spectate: local.spectate
  };
};

Object.defineProperty(module.exports, '_test', {
  get: function() {
    return function() {
      return lastInstance;
    };
  }
});
